//------------------------------------------------
//--- 010 Editor v0.0.0 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#define SGX_HASH_SIZE        32              /* SHA256 */

typedef struct _sgx_measurement_t
{
    UBYTE                 m[32];
} sgx_measurement_t;

typedef struct _wl_cert_t                         /* All fields except the mr_signer_list fields, are big-endian integer format */
{
    USHORT                version;                /* ( 0) White List Cert format version. Currently, only valid version is 1 */
    USHORT                cert_type;              /* ( 2) White List Cert Type. For Enclave Signing Key White List Cert, must be 1 */
    USHORT                provider_id;            /* ( 4) Enclave Signing Key White List Provider ID to identify the key used to sign this Enclave signing Key White List Certificate. Currently, only one White List Provider is approved: WLProviderID-ISecG = 0 */
    USHORT                le_prod_id;             /* ( 6) Launch Enclave ProdID the White List Cert applies to. Linux LE-ProdID = 0x20 */
    UINT                  wl_version;             /* ( 8) Version of the Enclave Signing Key White List. For a specific LE-ProdID, should increase on every WL Cert signing request */
    UINT                  entry_number;           /* (12) Number of MRSIGNER entries in the Cert. If the White List Certificate allows enclave signed by any key to launch, the White List Cert must only contain one all-0 MRSIGNER entry. */
    sgx_measurement_t     mr_signer_list[entry_number];       /* (16) White Listed Enclave Signing Key entry 0 - SHA256 Hash of the little-endian format RSA-3072 Enclave Signing Key modulus. If the White List Cert allows enclave signed by any key to launch, this field must be all 0s */
}wl_cert_t;

#define SGX_ECP256_KEY_SIZE             32

typedef struct _sgx_ec256_public_t
{
    UBYTE gx[32];
    UBYTE gy[32];
} sgx_ec256_public_t;

#define SGX_ECP256_KEY_SIZE             32
#define SGX_NISTP_ECP256_KEY_SIZE       8   //(SGX_ECP256_KEY_SIZE/sizeof(uint32_t))

typedef struct _sgx_ec256_signature_t
{
    UINT x[8];
    UINT y[8];
} sgx_ec256_signature_t;

typedef struct _wl_provider_cert_t                /* All fields are big endian */
{
    USHORT                version;                /* ( 0) White List Cert format version. Currently, only valid version is 1 */
    USHORT                cert_type;              /* ( 2) White List Cert Type, For Enclave Signing Key White List Signer Cert, must be 0 */
    USHORT                provider_id;            /* ( 4) Enclave Signing Key White List Signer ID assigned by the White List Root CA. Currently, only one White List Provider is approved: WLProviderID-ISecG = 0 */
    USHORT                root_id;                /* ( 6) Identify the White List Root CA key used to sign the Cert. Currently, only one WLRootID is valid: WLRootID-iKGF-Key-0 = 0 */
    sgx_ec256_public_t      pub_key;              /* ( 8) ECDSA public key of the Enclave Signing Key White List Provider identified by WLProviderID */
    sgx_ec256_signature_t   signature;            /* (72) ECDSA Signature by WL Root CA identified by WLRootID */
}wl_provider_cert_t;

typedef struct _wl_cert_chain_t
{
    wl_provider_cert_t      wl_provider_cert;
    wl_cert_t               wl_cert;
}wl_cert_chain_t;



BigEndian();

wl_cert_chain_t chain;
sgx_ec256_signature_t sig;
